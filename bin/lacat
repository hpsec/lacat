#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
# Licensed under the MIT License.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the
# following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
# NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
# USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# originally written jan23,2014
# version 20140128 - code stable, repo created -jk
# version 20161021 - fixed archive parsing, port to python 3 -jm

from __future__ import print_function, unicode_literals, division

import csv
from glob import glob
import json
import optparse
import gzip
import re
import struct
import io
from os import path
from sys import stderr
from kafka import KafkaProducer

#start_time = time.time()
# FIXME: redo CEF parser
cef_re_pairs = re.compile("(\w+)=(.*)")
cef_re_split = re.compile(" (?=\w+=)")


def parse_cef(s):
    """ returns dict of k/v extracted from cef string """
    d = dict()
    for c in [cef_re_pairs.findall(kv) for kv in cef_re_split.split(s) if kv]:
        for cc in c:
            if isinstance(cc, tuple) and len(cc) == 2:
                d[cc[0]] = cc[1]
    return d


def get_metadata(f):
    rows = list(f)
    # Why is the first row space separated, instead of comma separated?
    rows[0] = rows[0].replace(" ",",")
    return list(csv.DictReader(rows))


def read_chunk(f, start, count):
    """ move around inside gigantor file and return the gzip'd embed """
    f.seek(start+256)  # offset plus header
    chunk = io.BytesIO(f.read(count-256))
    return gzip.GzipFile(fileobj=chunk)


def parse_chunk(f, event_count):
    # We have to read some bytes from a tiny header, but we don't do anything
    # with those bytes.
    zero, length = struct.unpack(">hh", f.read(4))
    recv_name = f.read(length)
    # XXX: Why is there a zero here?
    zero = f.read(4)

    for _ in range(event_count):
        unpacked = struct.unpack(">qllqq", f.read(32))
        (time, length, recv_id, dvc_ip, zero) = unpacked
        event = f.read(length).decode('utf-8')
        # strip off syslog header, if present
        yield event[event.index(u"CEF:0"):]


def dump_cef(cef_recs, to_json=False, limit_to=[]):
    filters = dict(parse_search(kv) for kv in limit_to)
    for c in cef_recs:
        c = c.strip()
        if not to_json and not filters:
            # no json, no filter. just output
            print(c)
            continue
        p_c = parse_cef(c)
        if filters:
            # could use set intersection here but want to bypass set
            # instantiaton
            match = tuple(p_c.get(fk) == fv for fk, fv in filters.iteritems())
            if not all(match):
                continue
        if to_json:
            print(json.dumps(p_c))
        else:
            print(c)

def send_kafka(cef_recs, topic, servers):
    producer = KafkaProducer(
        bootstrap_servers=servers,
        compression_type='gzip',
        #compression_type='snappy',
    )
    for event in cef_recs:
        producer.send(topic, event.encode('utf-8'))
    producer.flush()
    producer.close()


def parse_search(kv):
    """ returns a tuple(k,v) from k=v """
    equal = kv.find('=')
    if equal == -1:
        raise Exception("filter format invalid. should be k=v")
    return (kv[:equal], kv[equal+1:])


def read_cef(file_list):
    for fdat, fcsv in file_list:
        if fcsv.endswith('.gz'):
            with gzip.open(fcsv,'rt') as f:
                metadata = get_metadata(f)
        else:
            with open(fcsv,'rt') as f:
                metadata = get_metadata(f)

        with open(fdat,'rb') as f:
            for chunk_md in metadata:
                start = int(chunk_md['BeginOffset'])
                chunk_length = int(chunk_md['Length'])
                event_count = int(chunk_md['EventCount'])
                with read_chunk(f, start, chunk_length) as chunk:
                    for event in parse_chunk(chunk, event_count):
                        yield event


if __name__ == '__main__':
    usage = """%prog [options] path_to_dat path_to_meta

Extracts cef events from Logger Archive files to stdout

THIS SOFTWARE IS UNSUPPORTED.  USE AT YOUR OWN RISK.

Why is it called lacat?
    Because "Logger_Archive_cat" was too long to type.

"""
    parser = optparse.OptionParser(usage=usage)
    parser.add_option(
        "-j", "--json", dest="json", action="store_true",
        default=False, help="export as json instead of raw cef")
    parser.add_option(
        "-f", "--filter", dest="filter", action="append", default=[],
        help="specify a key=val to filter records by. multiple -s k=v allowed")
    parser.add_option(
        "-d", "--directory", dest="directory", action="append", default=[],
        help="specify a directory full of dat and csv files")
    parser.add_option(
        "-k", "--kafka-topic", dest="kafka_topic", action="store",
        help="send events to kafka topic")
    # check that you can clear default for kafka-servers
    parser.add_option(
        "--kafka-servers", dest="kafka_servers", action="store",
        default='localhost:9092',
        help="connect to kafka with server name (can be comma-separated list)")
    #parser.add_option(
    #    "-o", "--output", dest="output", action="append", default=[],
    #    help="specify a output directory")
    options, args = parser.parse_args()

    # ArcSight_Data_46_0504403158265495552.dat
    # ArcSight_Metadata_46_504403158265495552.csv
    if options.directory:
        # user wants to scan through an entire directory
        csvFiles = (
            glob(options.directory[0] + '*.csv') +
            glob(options.directory[0] + '*.csv.gz')
        )
        file_list = []
        for csvFile in csvFiles:
            csv_path = csvFile.rstrip('.gz').rstrip('.csv')
            datFinder = path.basename(csv_path)[18:].split('_')  # returns list of significant digits
            # ArcSight_Metadata_46_504403158265495552.csv = ['46', '504403158265495552']
            # we need the significant digits because the archive loggers sometimes pad with extra zero
            datFile = (glob(options.directory[0] + '*_' + datFinder[0] + '_*' + datFinder[1] + '*.dat'))
            # datFile returns list of single file matching the csv significant digits
            file_list.append((datFile[0], csvFile))  # nice list of (CSV,DAT) tuples
        if not file_list:
            raise ValueError("No files found in directory.")

    elif len(args) == 2:
        # user manually specifies the dat and csv files
        f_dat = args[0]
        f_csv = args[1]
        file_list = [(args[0], args[1])]

    elif len(args) < 2:
        parser.print_help()
        raise SystemExit

    events = read_cef(file_list)
    if options.kafka_topic:
        send_kafka(
            events,
            options.kafka_topic,
            options.kafka_servers,
        )
    else:
        dump_cef(events, to_json=options.json, limit_to=options.filter)
    # print(time.time() - start_time)
